services:
  postgres:
    image: postgres:latest
    container_name: postgres_container
    restart: always
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $POSTGRES_USER" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - spring_network

  app:
    image: eclipse-temurin:21-jdk-jammy
    container_name: spring_app
    restart: always
    working_dir: /app
    volumes:
      - .:/app
    command: ./mvnw spring-boot:run
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://127.0.0.1:8080/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - spring_network

  nginx:
    image: nginx:stable-alpine
    container_name: nginx_reverse_proxy
    restart: always
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      app:
        condition: service_healthy
    command: /bin/sh -c "rm -f /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
    networks:
      - spring_network

volumes:
  postgres_data:

networks:
  spring_network:
    driver: bridge